[{"/home/ec2-user/kyc-di-demo/kyc-app/src/index.js":"1","/home/ec2-user/kyc-di-demo/kyc-app/src/App.js":"2","/home/ec2-user/kyc-di-demo/kyc-app/src/reportWebVitals.js":"3","/home/ec2-user/kyc-di-demo/kyc-app/src/aws-exports.js":"4","/home/ec2-user/kyc-di-demo/kyc-app/src/components/KYCContainer.js":"5","/home/ec2-user/kyc-di-demo/kyc-app/src/components/Liveliness.js":"6","/home/ec2-user/kyc-di-demo/kyc-app/src/components/Summary.js":"7","/home/ec2-user/kyc-di-demo/kyc-app/src/components/AnalyzeDocs.js":"8"},{"size":500,"mtime":1611693509315,"results":"9","hashOfConfig":"10"},{"size":419,"mtime":1611696011750,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1611693509315,"results":"12","hashOfConfig":"10"},{"size":1135,"mtime":1611841855387,"results":"13","hashOfConfig":"10"},{"size":3086,"mtime":1611841665179,"results":"14","hashOfConfig":"10"},{"size":8189,"mtime":1611840072546,"results":"15","hashOfConfig":"10"},{"size":6719,"mtime":1611841655863,"results":"16","hashOfConfig":"10"},{"size":10896,"mtime":1612344569249,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1oh3kt6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/ec2-user/kyc-di-demo/kyc-app/src/index.js",[],["38","39"],"/home/ec2-user/kyc-di-demo/kyc-app/src/App.js",[],"/home/ec2-user/kyc-di-demo/kyc-app/src/reportWebVitals.js",[],"/home/ec2-user/kyc-di-demo/kyc-app/src/aws-exports.js",[],"/home/ec2-user/kyc-di-demo/kyc-app/src/components/KYCContainer.js",["40"],"import React, { useState } from 'react'\n\nimport { AmplifySignOut } from '@aws-amplify/ui-react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Tabs from 'react-bootstrap/Tabs'\nimport Tab from 'react-bootstrap/Tab'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Button from 'react-bootstrap/Button'\n\nimport Liveliness from './Liveliness'\nimport AnalyzeDocs from './AnalyzeDocs'\nimport Summary from './Summary'\n\n\nexport default () => {\n\n  const [currentTabKey, setCurrentTabKey] = useState(\"welcome\");\n\n  const [liveTestDetails, setLiveTestDetails] = useState({});\n  const [documentDetails, setDocumentDetails] = useState({});\n  \n  const startKyc = () => {\n    setCurrentTabKey(\"Liveliness\");\n\n  }\n\n  const onSelectTab = (eventkey) => {\n    console.log(\"printing event key \",eventkey);\n    setCurrentTabKey(eventkey);\n  }\n\n  const setTabStatus = (value) => {\n    console.log(\"current tab value \", value);\n    setCurrentTabKey(value);\n  }\n  \n  \n  return (\n   <div>\n  <Container>\n  <Row>\n    <Col>\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#\"><h2 className=\"app-title\">Video KYC</h2></Navbar.Brand>\n      <span className=\"logout\">\n      <AmplifySignOut/>\n      </span>\n    </Navbar>\n    </Col>\n  </Row>\n  <Row><Col><br></br></Col></Row>\n  <Row>\n    <Col>\n    <Tabs defaultActiveKey={currentTabKey} activeKey = {currentTabKey} id=\"uncontrolled-tab-example\" onSelect={onSelectTab}>\n        <Tab eventKey=\"welcome\" title=\"Welcome\">\n            <Jumbotron>\n                <h2 className=\"tab-element-align\">Welcome to video KYC</h2>\n                <div className=\"tab-element-align\">\n                    <p>The KYC process consists of 3 simple steps. </p>\n                    <ul>\n                        <li>Liveliness Detection - The user will do a series of face gestures to determine whether its a live feed</li>\n                        <li>Upload Documents - upload valid ID documents to use for verification.</li>\n                        <li>Validation and summary</li>\n                    </ul>\n                </div>\n                <p className=\"tab-button-align\">\n                    <Button variant=\"primary\" onClick = {startKyc}>Start</Button>\n                </p>\n            </Jumbotron>\n        </Tab>\n        <Tab eventKey=\"Liveliness\" title=\"Liveliness Test\" disabled>\n            <div>\n                <Liveliness setTabStatus={setTabStatus} setLiveTestDetails={setLiveTestDetails} />\n            </div>\n        </Tab>\n        <Tab eventKey=\"UploadDocs\" title=\"Upload Documents\" disabled>\n            <div>\n              <AnalyzeDocs setTabStatus={setTabStatus} setDocumentDetails={setDocumentDetails} />\n            </div>\n        </Tab>\n        <Tab eventKey=\"AnalysisDetails\" title=\"Details of Analysis\" disabled>\n        <Summary setTabStatus={setTabStatus} documentDetails={documentDetails} liveTestDetails={liveTestDetails} />\n        </Tab>\n        </Tabs>\n    </Col>\n  </Row>\n  </Container>\n  </div>\n  )\n}\n\n","/home/ec2-user/kyc-di-demo/kyc-app/src/components/Liveliness.js",["41"],"import React,{ useState, useEffect } from \"react\";\nimport Webcam from \"react-webcam\";\nimport Button from 'react-bootstrap/Button'\nimport gest_data from './gestures.json'\nimport Card from \"react-bootstrap/Card\"\nimport ProgressBar from \"react-bootstrap/ProgressBar\"\nimport _ from 'lodash'\nimport Jimp from 'jimp'\n\nimport { Auth, Logger } from 'aws-amplify'\nimport AWS from 'aws-sdk'\nimport awsConfig from \"../aws-exports\"\n\nconst logger = new Logger('kyc','INFO');\nAWS.config.update({region:awsConfig.aws_cognito_region});\n\n\nconst videoConstraints = {\n    width: 1280,\n    height: 720,\n    facingMode: \"user\"\n  };\n\n  export default ({setTabStatus, setLiveTestDetails}) => {\n    const [gesture, setGesture] = useState(null);\n    const [showSpinner,setShowSpinner] = useState(false);\n    const [alertMessage, setAlertMessage] = useState(\"You will be asked to do a series of random gestures which will enable us to detect a live feed.  \");\n    const [showProgress, setShowProgress] = useState(false);\n    const [showWebcam, setShowWebcam] = useState(false);\n    const [progressValue, setProgressValue] = useState(5);\n\n    // identification state from liveness test\n    const [liveGender, setLiveGender] = useState(\"\");\n    const [ageRange, setAgeRange] = useState(\"\");    \n    const [liveImage, setLiveImage] = useState(null);\n\n    useEffect(() => {\n        Auth.currentCredentials().then(function(creds){\n            AWS.config.update(creds);   \n        })\n    },[])\n\n    useEffect(() => {\n      if(gesture !== null)  {\n        const description = getGestureDescription(gesture)  \n        setAlertMessage(description + \". Click button to continue =>  \")\n      }\n  \n    },[gesture])\n\n    const getGestureDescription = (gesture) => {\n        return _.find(gest_data, function(gest){\n            return gest.name === gesture;\n        }).description\n    }\n    \n    const proceedToNext = () => {\n        setLiveTestDetails({\n           liveGender:liveGender,\n           ageRange:ageRange,\n           liveImage:liveImage \n        })  \n      setTabStatus(\"UploadDocs\");\n    }\n\n    const updateGestureState = () => {\n        \n        // update current gesture state to true\n        // update next gesture\n        if( gesture === \"smile\") {\n            setProgressValue(30)\n            setGesture(\"lookRight\")\n        } else if (gesture === \"lookRight\") {\n            setProgressValue(70)\n            setGesture(\"mouthOpen\")\n        } else {\n            setProgressValue(100)\n            setShowWebcam(false);\n        }\n    }\n\n    const validateGesture = (gesture, data) => {\n        logger.info(\"Validating gesture\",data);\n        if(data.length === 0){\n            // more than one face\n            return {result:false, message:\"Could not recognize a face. Try again \"}\n        }\n\n        if(data.length > 1){\n            // more than one face\n            return {result:false, message:\"More than one face. Try again \"}\n        }\n        logger.info(data.FaceDetails[0])\n\n        if(gesture === \"smile\"){\n            \n            if(data.FaceDetails[0].Smile.Value === true){\n                return {result:true, message:\"Thank you\"}\n            } else {\n                return {result:false, message:\"Failed to validate smile. Try again \"}\n            }\n            \n        } else if(gesture === \"lookRight\") {\n            if(data.FaceDetails[0].Pose.Yaw <= -30){\n                return {result:true, message:\"Thank you\"}\n            } else {\n                return {result:false, message:\"Failed to validate face turning right. Try again \"}\n            }\n        } else if(gesture === \"mouthOpen\") {\n            if(data.FaceDetails[0].MouthOpen.Value === true){\n                return {result:true, message:\"You can successfully completed Liveness checks !! \"}\n            } else {\n                return {result:false, message:\"Failed to validate open mouth. Try again \"}\n            }\n        }\n\n        return {result:false, message:\"Unkown gesture type specified\"}\n    }\n\n\n    const requestGesture = async () => {\n      \n      \n        setShowSpinner(true);\n      \n        const imageBase64String = webcamRef.current.getScreenshot({width: 800, height: 450}); \n        const base64Image = imageBase64String.split(';base64,').pop();  \n        const imageBuffer = new Buffer(base64Image, 'base64');    \n\n        let rekognition = new AWS.Rekognition();\n        let params = {\n        Attributes: [ \"ALL\" ],\n            Image: {\n                Bytes:imageBuffer\n            }\n        };\n        \n        let faceDetectResponse = await rekognition.detectFaces(params).promise()\n\n        if (faceDetectResponse.$response.error) {\n            setShowSpinner(false);\n            setAlertMessage(faceDetectResponse.$response.error.message)\n            return new Promise((resolve, reject) => {\n                throw new Error(faceDetectResponse.$response.error.message);\n            }) \n        }\n        else { \n            let validationResult = validateGesture(gesture, faceDetectResponse) \n            if(validationResult.result){\n                if(gesture === 'smile'){\n\n                    // set the gender\n                    setLiveGender(faceDetectResponse.FaceDetails[0].Gender.Value)\n                    setAgeRange(faceDetectResponse.FaceDetails[0].AgeRange.Value)\n\n                    // get the bounding box\n                    let imageBounds = faceDetectResponse.FaceDetails[0].BoundingBox\n                    logger.info(imageBounds)\n                    // crop the face and store the image\n                    Jimp.read(imageBuffer, (err, image) => {\n                        if (err) throw err;\n                        else {\n                        \n                        image.crop(image.bitmap.width*imageBounds.Left - 15, image.bitmap.height*imageBounds.Top - 15, image.bitmap.width*imageBounds.Width + 30, image.bitmap.height*imageBounds.Height + 30)\n                            .getBase64(Jimp.MIME_JPEG, function (err, base64Image) {\n                                setLiveImage(base64Image)\n                            })\n                        }\n                    })\n\n                    // update gesture state\n                    setAlertMessage(validationResult.message)\n                    setShowSpinner(false);\n                    updateGestureState();    \n                } else {\n                    // update gesture state\n                    setAlertMessage(validationResult.message)\n                    setShowSpinner(false);\n                    updateGestureState();\n                }\n            } else {\n                // unable to validate gesture - set Error Message\n                setAlertMessage(validationResult.message)\n                setShowSpinner(false);\n            }     \n        }     \n    }\n\n    function start_test(evt){\n      setShowProgress(true);\n      setShowWebcam(true);\n      setGesture(\"smile\")\n    }\n\n    const webcamRef = React.useRef(null);\n   \n   \n    return (\n        <Card>\n            <Card.Header>\n                {alertMessage} \n                {!showProgress && <Button variant=\"primary\" onClick={start_test}>Start</Button>}\n                {showProgress && progressValue < 100 && <Button variant=\"primary\" onClick={requestGesture}>Validate</Button>}\n                {progressValue === 100 && <Button variant=\"primary\" onClick={proceedToNext}>Continue</Button>}\n            </Card.Header>\n            \n            <Card.Body>\n                {showSpinner && <div className=\"spinner\" ></div>}\n                {showWebcam && <div className=\"video-padding\">\n                        <Webcam\n                            audio={false}\n                            height={450}\n                            ref={webcamRef}\n                            screenshotFormat=\"image/jpeg\"\n                            width={800}\n                            videoConst\n                            raints={videoConstraints}\n                        />\n                        \n                    </div>\n                }\n                \n                {showProgress &&  <div className=\"live-progressbar\"><ProgressBar now={progressValue} label={`${progressValue}%`} /></div> }\n\n            </Card.Body>\n        </Card>\n    );\n  };\n\n  \n\n","/home/ec2-user/kyc-di-demo/kyc-app/src/components/Summary.js",["42"],"import React,{ useState, useEffect } from \"react\";\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Table from 'react-bootstrap/Table'\n\nimport { Auth, Logger } from 'aws-amplify'\nimport AWS from 'aws-sdk'\nimport awsConfig from \"../aws-exports\"\n\nconst logger = new Logger('kyc-summary','INFO');\nAWS.config.update({region:awsConfig.aws_cognito_region});\n\n\nexport default ({setTabStatus,documentDetails, liveTestDetails}) => {\n\n    const [faceSimilarity, setFaceSimilarity] = useState(-1)\n    const [alertMessage, setAlertMessage] = useState(\"\")\n  \n    useEffect(() => {\n    \n        Auth.currentCredentials().then(function(creds){\n            AWS.config.update(creds);   \n        })\n\n    },[])\n    \n    const compareFaces = async () => {\n\n        let rekognition = new AWS.Rekognition();\n\n        \n        const sourceImage = liveTestDetails['liveImage']\n        const sourceBase64Image = sourceImage.split(';base64,').pop();  \n        const sourceBinaryImg = new Buffer(sourceBase64Image, 'base64');  \n\n        const targetImage = documentDetails['userImage']\n        const targetBase64Image = targetImage.split(';base64,').pop();  \n        const targetBinaryImg = new Buffer(targetBase64Image, 'base64');\n\n        \n        let params = {\n            SourceImage: { \n              Bytes: sourceBinaryImg \n              \n            },\n            TargetImage: { \n              Bytes: targetBinaryImg\n            },\n            QualityFilter: 'NONE',\n            SimilarityThreshold: 30\n        };\n        \n\n        let compareFacesResponse = await rekognition.compareFaces(params).promise()\n        if(compareFacesResponse.$response.error) {\n            logger.info(compareFacesResponse.$response.error.message)\n            setFaceSimilarity(-1)\n            setAlertMessage(compareFacesResponse.$response.error.message)\n        } else {\n            logger.info('compare results', compareFacesResponse)\n\n            if(compareFacesResponse.FaceMatches.length === 0){\n                setAlertMessage(\" Did not pass Face similarity test. Try again !\") \n                setFaceSimilarity(0)\n            }\n\n            setFaceSimilarity(compareFacesResponse.FaceMatches[0].Similarity)\n            if(compareFacesResponse.FaceMatches[0].Similarity > 80){\n                setAlertMessage(\" You have successfully completed the KYC\")\n            } else {\n                setAlertMessage(\" Did not pass Face similarity test. Try again !\") \n            }\n        }\n             \n    }\n        \n    \n    \n    return (\n\n        <div>\n            <Table responsive>\n            <tbody>\n                <tr>\n                    <td>\n                <Card border=\"light\">\n                    <Card.Header>\n                        Liveness Test Data \n                    </Card.Header>\n                    <Card.Body>\n                        <Container>\n                            <Row>\n                            <Table responsive>\n                                <tbody>\n                                    <tr>\n                                    <td>Gender</td>\n                                    <td>{liveTestDetails[\"liveGender\"]}</td>\n                                    </tr>\n                                    \n                                    <tr>\n                                    <td>Live Image</td>\n                                    <td>\n                                        <img alt=\"Live snapshot\" src={`${liveTestDetails['liveImage']}`} />\n                                    </td>\n                                    </tr>\n                                   \n                                </tbody>\n                                </Table>\n                          \n                            </Row>\n                        </Container>\n                    </Card.Body>\n                \n                </Card>\n                </td>\n                <td>\n                <Card border=\"light\">\n                    <Card.Header>\n                       Data Extracted from ID documents.\n                    </Card.Header>\n                    <Card.Body>\n                        <Container>\n                            <Row>\n                            <Table responsive>\n                                <tbody>\n                                <tr>\n                                    <td>Document Type</td>\n                                    <td>{documentDetails[\"documentType\"]}</td>\n                                    </tr>\n\n                                    <tr>\n                                    <td>Name</td>\n                                    <td>{documentDetails[\"name\"]}</td>\n                                    </tr>\n\n                                    <tr>\n                                    <td>Date of Birth</td>\n                                    <td>{documentDetails[\"dateOfBirth\"]}</td>\n                                    </tr>\n\n                                    <tr>\n                                    <td>Gender</td>\n                                    <td>{documentDetails[\"gender\"]}</td>\n                                    </tr>\n                                    \n                                    <tr>\n                                    <td>Image</td>\n                                    <td>\n                                        <img  alt=\"User from Document\" src={`${documentDetails['userImage']}`} />\n                                    </td>\n                                    </tr>\n                                   \n                                </tbody>\n                                </Table>\n                          \n                            </Row>\n                        </Container>\n                    </Card.Body>\n                </Card>\n                </td>\n                </tr>\n                <tr>\n                    <td colSpan=\"2\">\n                    <Card>\n                        <Card.Header>\n                        Compare Faces to complete KYC\n                        </Card.Header>\n                        <Card.Body>\n                            \n                        {faceSimilarity === -1 && <Button variant=\"primary\" onClick={compareFaces}>Compare Faces</Button> }\n\n                        {faceSimilarity !== -1 && <span>Face Similarity is <b> {Math.round(faceSimilarity, -2) }%  </b></span> }                        \n\n                         <span> {alertMessage} </span>\n                            \n                        </Card.Body>\n                    </Card>\n                </td>\n                </tr>\n                </tbody>\n            </Table>    \n\n        </div>\n    )\n};\n","/home/ec2-user/kyc-di-demo/kyc-app/src/components/AnalyzeDocs.js",["43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":18,"column":1,"nodeType":"50","endLine":93,"endColumn":2},{"ruleId":"48","severity":1,"message":"49","line":24,"column":3,"nodeType":"50","endLine":228,"endColumn":5},{"ruleId":"48","severity":1,"message":"49","line":16,"column":1,"nodeType":"50","endLine":187,"endColumn":3},{"ruleId":"48","severity":1,"message":"49","line":28,"column":3,"nodeType":"50","endLine":314,"endColumn":5},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]